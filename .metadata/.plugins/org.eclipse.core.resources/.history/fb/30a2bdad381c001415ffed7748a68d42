package Levels;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.util.ArrayList;

import com.thoughtworks.xstream.XStream;

import Managers.InputManager;
import Managers.KeyManager;
import Managers.ResourceManager;

import npcquest.NPCQuest;

import entities.GameObject;
import entities.GameSprite;
import entities.NPC;
import entities.Player;

public class Room {
	public int color_index = 0;
	public Color COLOR_ZERO;
	public Color COLOR_ONE;
	public Color COLOR_TWO;
	public Color COLOR_THREE;
	
	public int MAP_WIDTH;
	public int MAP_HEIGHT;
	public Camera camera;
	public String spoken_text = "";
	public boolean is_speaker_player = false;
	public int speech_timer = 0;
	public int speech_time_limit = 30;
	public boolean speaking = false;
	public int speaker_id = 0;
	public boolean paused = false;
	
	public String tilesheet_name = "tilesheet";
	public ArrayList<ArrayList<Tile>> tiles;

	public Player player;
	public ArrayList<GameObject> entities;
	
	public Room(){
		/*COLOR_ZERO = NPCQuest.COLOR_ZERO;
		COLOR_ONE = NPCQuest.COLOR_ONE;
		COLOR_TWO = NPCQuest.COLOR_TWO;
		COLOR_THREE = NPCQuest.COLOR_THREE;*/
		
		MAP_WIDTH = NPCQuest.GAME_WIDTH / Tile.WIDTH;
		MAP_HEIGHT = NPCQuest.GAME_HEIGHT / Tile.HEIGHT;
		camera = new Camera();
		
		player = new Player(72, 96);
		entities = new ArrayList<GameObject>();
		InitializeTiles();
	}

	public void Restart(){
		player.Restart();
		for (int i = 0; i < entities.size(); i++){
			entities.get(i).Restart();
		}
	}
	
	public void ColorCycle(){
		color_index++;
		if (color_index >= NPCQuest.PALETTES.length){
			color_index = 0;
		}
		COLOR_ZERO = NPCQuest.PALETTES[color_index][0];
		COLOR_ONE = NPCQuest.PALETTES[color_index][1];
		COLOR_TWO = NPCQuest.PALETTES[color_index][2];
		COLOR_THREE = NPCQuest.PALETTES[color_index][3];
		
		player.animation.abs_ani_x = color_index*(4*16);
		for (int i = 0; i < entities.size(); i++){
			try{
				GameSprite.class.cast(entities.get(i));
				((GameSprite)entities.get(i)).animation.abs_ani_x = color_index*(4*16);
			}catch(Exception e){
			}
		}
		for (int i = 0; i < tiles.size(); i++){
			for (int j = 0; j < tiles.get(i).size(); j++){
				if (tiles.get(i).get(j).collision == Tile.GHOST)
					tiles.get(i).get(j).tileset_x = color_index*2;
				else
					tiles.get(i).get(j).tileset_x = (color_index*2)+1;
			}
		}
	}
	
	public void InitializeTiles(){
		tiles = new ArrayList<ArrayList<Tile>>();
		for (int i = 0; i < MAP_HEIGHT; i++){
			ArrayList<Tile> row = new ArrayList<Tile>();
			for (int j = 0; j < MAP_WIDTH; j++){
				row.add(new Tile(j * Tile.WIDTH, i * Tile.HEIGHT, Tile.GHOST, 0, 0));
			}
			tiles.add(row);
		}
	}
	
	public boolean isValidTile(int i, int j){
		return !(i < 0 || i >= tiles.size() || j < 0 || j >= tiles.get(i).size());
	}
	
	public void Update(){
		InputManager.Update(this);
		player.Update(this);
		camera.Update(this);
		for (int i = 0; i < entities.size(); i++){
			entities.get(i).Update(this);
		}
		for (int i = entities.size()-1; i >= 0; i--){
			if (entities.get(i).delete_me)
				entities.remove(i);
		}
		KeyManager.ForgetKeysPressed();
		
		//Speech timer for various cyclic things
		speech_timer++;
		if (speech_timer > speech_time_limit)
			speech_timer = 0;
	}
	
	public void Render(Graphics2D g2d){
		g2d.setBackground(COLOR_ZERO);
		g2d.clearRect(0, 0, NPCQuest.GAME_WIDTH, NPCQuest.GAME_HEIGHT);
		
		//DRAW THE TILES OF THE ROOM
		int left_tile = (int)Math.floor((camera.x - 1) / Tile.WIDTH);
		int right_tile = (int)Math.ceil((camera.x + camera.width + 1) / Tile.WIDTH);
		int top_tile = (int)Math.floor((camera.y - 1) / Tile.HEIGHT);
		int bottom_tile = (int)Math.ceil((camera.y + camera.height + 1) / Tile.HEIGHT);
		
		Image tileimg = ResourceManager.images.get(tilesheet_name);
		for (int i = top_tile; i < bottom_tile; i++){
			if (!isValidTile(i, 0)) continue;
			for (int j = left_tile; j < right_tile; j++){
				if (!isValidTile(i, j)) continue;
				Tile tile = tiles.get(i).get(j);
				tile.Render(g2d, camera, tileimg);
			}
		}
		
		for (int i = 0; i < entities.size(); i++){
			entities.get(i).Render(g2d, camera);
		}
		player.Render(g2d, camera);
		
		RenderSpeech(g2d);
	}
	
	public void Speak(String text, int id){
		spoken_text = text;
		speaker_id = id;
		speaking = true;
		is_speaker_player = false;
	}

	public void Speak(String text, int id, boolean player){
		spoken_text = text;
		speaker_id = id;
		speaking = true;
		is_speaker_player = player;
	}
	
	public void StopSpeaking(){
		spoken_text = "";
		speaker_id = 0;
		speaking = false;
	}
	
	public void RenderSpeech(Graphics2D g2d){
		if (!paused){
			if (!speaking || spoken_text == null || spoken_text.length() == 0) return;
		}
		
		int y = 0;
		int h = 24;
		if (player.y+player.bb/2 < NPCQuest.GAME_HEIGHT/2)
			y = NPCQuest.GAME_HEIGHT - 24 - h;
		if (paused)
			y = NPCQuest.GAME_HEIGHT/2 - h;
		//DRAWR THE BORDER
		Color borderBGColor = COLOR_THREE;
		if (is_speaker_player) borderBGColor = COLOR_TWO;
		Color borderColor = COLOR_ONE;
		g2d.setBackground(borderBGColor);
		g2d.clearRect(8, y+8, NPCQuest.GAME_WIDTH - 16, h);
		g2d.setBackground(borderColor);
		g2d.clearRect(9, y+9, NPCQuest.GAME_WIDTH - 18, h-2);
		g2d.setBackground(borderBGColor);
		g2d.clearRect(10, y+10, NPCQuest.GAME_WIDTH - 20, h-4);
		
		//DRAWR THE PORTRAIT
		g2d.setBackground(COLOR_ZERO);
		g2d.clearRect(12, y+12, 16, 16);
		int row = 2*speaker_id;
		int column = color_index * 4;
		int dx = (int)Math.round(12-camera.x+camera.screen_offset_x);
		int dy = (int)Math.round(y+12-camera.y+camera.screen_offset_y);
		int sx = 16*column;
		int sy = 16*row;
		Image image = ResourceManager.images.get("npc_sheet");
		if (is_speaker_player) image = ResourceManager.images.get("player_sheet");
		g2d.drawImage(image,
			//DESTINATION         // SOURCE                 //OBSERVER
			dx, dy, dx+16, dy+16, sx, sy, sx + 16, sy + 16, null); 
		
		//DRAWR THE TEXT
		String[] text = spoken_text.split("\n");
		int fs = 5;
		g2d.setColor(COLOR_ZERO);
		g2d.setFont(new Font(Font.MONOSPACED, Font.PLAIN, fs));
		for (int i = 0; i < text.length; i++){
			g2d.drawString(text[i], 32, y+16+(i*fs));
		}
		
		//DRAWR THE X
		if (speech_timer >= Math.round(speech_time_limit/2.0)){
			if (paused)
				g2d.drawString("ENTR", NPCQuest.GAME_WIDTH - 28, y+28);
			else g2d.drawString("X", NPCQuest.GAME_WIDTH - 16, y+28);
		}
	}
	
	/***********************************MOUSE CLICK LEVEL EDIT STUFF*************/
	public void MouseClicked(int tilex, int tiley, int clickType){
		if (clickType == 1){
			int qx = Tile.WIDTH/2;
			int qy = Tile.HEIGHT/2;
			NPC npc = null;
			for (int i = 0; i < entities.size(); i++){
				if (entities.get(i).type == "NPC"){
					NPC temp_npc = (NPC)entities.get(i);
					if (tilex*qx >= temp_npc.x && tilex*qx <= temp_npc.x+temp_npc.rb &&
							tiley*qy >= temp_npc.y && tiley*qy <= temp_npc.y+temp_npc.bb){
						npc = temp_npc;
					}
				}
			}
			if (npc == null){
				npc = new NPC(tilex*qx, tiley*qy, 0, NPC.GetVoice(0));
				entities.push(npc);
			}
			npc.visible = true;
			npc.fade_away = false;
			
		}else{
			Tile tile = tiles.get(tiley).get(tilex);
			boolean cycle = false;
			if (clickType == 0){
				tile.collision = Tile.SOLID;
				if (tile.tileset_x == 1)
					cycle = true;
				else tile.tileset_x = 1;
			}else if (clickType == 2){
				tile.collision = Tile.GHOST;
				if (tile.tileset_x == 0)
					cycle = true;
				else tile.tileset_x = 0;
			}
			
			if (cycle){
				int max = 3;
				tile.tileset_y++;
				if (tile.tileset_y >= max){
					tile.tileset_y = 0;
				}
			}
		}
	}
	
	public String Export(){
		XStream xstream = new XStream();
		String xml = xstream.toXML(this);
		return xml;
	}
}